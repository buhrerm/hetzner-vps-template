version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ${APP_NAME}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis-compatible Cache (Dragonfly)
  cache:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: ${APP_NAME}_cache
    restart: unless-stopped
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    volumes:
      - cache_data:/data
    networks:
      - app-network

  # Backend API (TypeGraphQL/Prisma)
  api:
    build:
      context: /opt/${BACKEND_REPO_NAME}
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://cache:6379
      NODE_ENV: production
      PORT: 4000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      cache:
        condition: service_started
    networks:
      - app-network
    volumes:
      - /opt/${BACKEND_REPO_NAME}:/app
      - /app/node_modules

  # Frontend (Next.js)
  frontend:
    build:
      context: /opt/${FRONTEND_REPO_NAME}
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL}
      NEXT_PUBLIC_WS_URL: ${WS_URL}
    env_file:
      - .env
    depends_on:
      - api
    networks:
      - app-network
    volumes:
      - /opt/${FRONTEND_REPO_NAME}:/app
      - /app/node_modules
      - /app/.next

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ${APP_NAME}_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/sites-enabled:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - api
    networks:
      - app-network

  # Certbot for SSL renewal
  certbot:
    image: certbot/certbot
    container_name: ${APP_NAME}_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  # Webhook handler for GitHub auto-deployment
  webhook:
    build:
      context: ./webhook
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_webhook
    restart: unless-stopped
    environment:
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt:/opt
      - /root/.ssh:/root/.ssh:ro
    ports:
      - "9000:9000"
    networks:
      - app-network

volumes:
  postgres_data:
  cache_data:

networks:
  app-network:
    driver: bridge